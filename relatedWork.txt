RELATED WORK

Firmware entry point analysis can be considered one of the many steps in the overall study of embedded systems. As more and more objects are entering the realm of IOT and incorporate embedded systems of their own, the discussion of firmware analysis is already growing to include a wide variety of new topics. 

[1],[3] and [12] touch upon the general idea of manually analyzing disassembled firmware images, mainly to extract information from headers and also for use in emulation. Manual analysis is, however, time consuming, considering the amount of information one needs to gather before they may begin to inspect actual code (which will be done with a tool such as IDA Pro). 

Because of this, many tools have been developed to automate or at least assist in much of the analysis. [5] and [13] take the dynamic analysis approach, and run a given firmware image within an emulator. [13] is of particular interest because its emulation process includes a partial emulation of the underlying hardware, meaning of course that only firmware for known hardware devices can be tested.

This lack of environmental knowledge (and often physical hardware) prompts many static approaches, such as Firmalice[2], which builds off of techniques in [4] to reverse engineer firmware when only a binary-blob is present. This brand of analysis is especially useful, considering firmware entry point detection is usually a step in the process. 

Similar efforts and challenges in static analysis are seen in [6], but on a much larger scale. Tens of thousands of images weâ€™re unpacked, requiring the analysis to be general enough for a large range of binaries. The results were compared to the popular firmware analysis tool, Binwalk[7], which is often used in manual static analysis. Binwalk[7] uses known patterns to locate structures within executables, and can be particularly useful for locating firmware headers.

[8] and [9] show examples of static analysis on firmware using Binwalk[7], as well as other useful techniques for reverse engineering embedded systems.

Other techniques have been developed to target specific device vulnerabilities, rather than overarching analyses of firmware images. [1] and [10] focus on the exploitation of firmware updates to deliver malicious code (to fitness trackers and HP printers, respectively), and note a general lacking in the current state of firmware security. Similarly, FIE[14] is a tool developed to find bugs in the MSP430 family of micro controllers, building off of KLEE[15] for the purposes of conducting symbolic execution. While these analyses are limited in scope, they all shed light into interesting ways of inspecting firmware that can potentially be applied to a greater and more general range of devices. 

